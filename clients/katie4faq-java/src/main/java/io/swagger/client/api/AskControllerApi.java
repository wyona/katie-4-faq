/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AskQuestionBody;
import io.swagger.client.model.Error;
import io.swagger.client.model.ResponseAnswer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AskControllerApi {
    private ApiClient apiClient;

    public AskControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AskControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAnswerUsingGET
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param answerLinkType Answer link type. When value is set to &#39;deeplink&#39; and as soon as expert will have answered question, then email or push notification to questioner will contain a deep link to answer, such that mobile app is opened and answer can be read within mobile app (optional)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers. When no domain Id is set, then the ROOT domain Id will be used. (optional)
     * @param email Email address of user asking question (e.g. &#39;louise@wyona.com&#39;), such that user can be notified by email when an expert has answered the question (optional)
     * @param fcmToken Firebase Cloud Messaging token associated with mobile device of user asking question, such that a push notification can be sent when an expert has answered the question (optional)
     * @param webhookEchoContent Content which is echoed back by webhook(s), in case webhook(s) configured for the given domain Id  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnswerUsingGETCall(String question, String answerLinkType, Object authorization, String domainId, String email, String fcmToken, String webhookEchoContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (answerLinkType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("answer_link_type", answerLinkType));
        if (domainId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domainId", domainId));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (fcmToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fcm_token", fcmToken));
        if (question != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("question", question));
        if (webhookEchoContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("webhook_echo_content", webhookEchoContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnswerUsingGETValidateBeforeCall(String question, String answerLinkType, Object authorization, String domainId, String email, String fcmToken, String webhookEchoContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling getAnswerUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnswerUsingGETCall(question, answerLinkType, authorization, domainId, email, fcmToken, webhookEchoContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Ask question and get answer of a previously asked duplicated question. If no answer is available, then the uuid and answer field of the response body will be null.
     * 
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param answerLinkType Answer link type. When value is set to &#39;deeplink&#39; and as soon as expert will have answered question, then email or push notification to questioner will contain a deep link to answer, such that mobile app is opened and answer can be read within mobile app (optional)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers. When no domain Id is set, then the ROOT domain Id will be used. (optional)
     * @param email Email address of user asking question (e.g. &#39;louise@wyona.com&#39;), such that user can be notified by email when an expert has answered the question (optional)
     * @param fcmToken Firebase Cloud Messaging token associated with mobile device of user asking question, such that a push notification can be sent when an expert has answered the question (optional)
     * @param webhookEchoContent Content which is echoed back by webhook(s), in case webhook(s) configured for the given domain Id  (optional)
     * @return ResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseAnswer getAnswerUsingGET(String question, String answerLinkType, Object authorization, String domainId, String email, String fcmToken, String webhookEchoContent) throws ApiException {
        ApiResponse<ResponseAnswer> resp = getAnswerUsingGETWithHttpInfo(question, answerLinkType, authorization, domainId, email, fcmToken, webhookEchoContent);
        return resp.getData();
    }

    /**
     * Ask question and get answer of a previously asked duplicated question. If no answer is available, then the uuid and answer field of the response body will be null.
     * 
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param answerLinkType Answer link type. When value is set to &#39;deeplink&#39; and as soon as expert will have answered question, then email or push notification to questioner will contain a deep link to answer, such that mobile app is opened and answer can be read within mobile app (optional)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers. When no domain Id is set, then the ROOT domain Id will be used. (optional)
     * @param email Email address of user asking question (e.g. &#39;louise@wyona.com&#39;), such that user can be notified by email when an expert has answered the question (optional)
     * @param fcmToken Firebase Cloud Messaging token associated with mobile device of user asking question, such that a push notification can be sent when an expert has answered the question (optional)
     * @param webhookEchoContent Content which is echoed back by webhook(s), in case webhook(s) configured for the given domain Id  (optional)
     * @return ApiResponse&lt;ResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseAnswer> getAnswerUsingGETWithHttpInfo(String question, String answerLinkType, Object authorization, String domainId, String email, String fcmToken, String webhookEchoContent) throws ApiException {
        com.squareup.okhttp.Call call = getAnswerUsingGETValidateBeforeCall(question, answerLinkType, authorization, domainId, email, fcmToken, webhookEchoContent, null, null);
        Type localVarReturnType = new TypeToken<ResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ask question and get answer of a previously asked duplicated question. If no answer is available, then the uuid and answer field of the response body will be null. (asynchronously)
     * 
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param answerLinkType Answer link type. When value is set to &#39;deeplink&#39; and as soon as expert will have answered question, then email or push notification to questioner will contain a deep link to answer, such that mobile app is opened and answer can be read within mobile app (optional)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers. When no domain Id is set, then the ROOT domain Id will be used. (optional)
     * @param email Email address of user asking question (e.g. &#39;louise@wyona.com&#39;), such that user can be notified by email when an expert has answered the question (optional)
     * @param fcmToken Firebase Cloud Messaging token associated with mobile device of user asking question, such that a push notification can be sent when an expert has answered the question (optional)
     * @param webhookEchoContent Content which is echoed back by webhook(s), in case webhook(s) configured for the given domain Id  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnswerUsingGETAsync(String question, String answerLinkType, Object authorization, String domainId, String email, String fcmToken, String webhookEchoContent, final ApiCallback<ResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnswerUsingGETValidateBeforeCall(question, answerLinkType, authorization, domainId, email, fcmToken, webhookEchoContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postQuestionUsingPOST
     * @param domainId Domain Id of knowledge base, for example &#39;b3158772-ac8f-4ec1-a9d7-bd0d3887fd9b&#39;, which contains its own set of questions/answers (required)
     * @param questionAndContactInfo Question and optional contact information in case Katie does not know the answer and a human expert can send an answer to questioner (required)
     * @param authorization Bearer JWT (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postQuestionUsingPOSTCall(String domainId, AskQuestionBody questionAndContactInfo, Object authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = questionAndContactInfo;

        // create path and map variables
        String localVarPath = "/api/v1/ask/{domain-id}"
            .replaceAll("\\{" + "domain-id" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postQuestionUsingPOSTValidateBeforeCall(String domainId, AskQuestionBody questionAndContactInfo, Object authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling postQuestionUsingPOST(Async)");
        }
        
        // verify the required parameter 'questionAndContactInfo' is set
        if (questionAndContactInfo == null) {
            throw new ApiException("Missing the required parameter 'questionAndContactInfo' when calling postQuestionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postQuestionUsingPOSTCall(domainId, questionAndContactInfo, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Ask question and get answer of a previously asked duplicated question. If no answer is available, then the uuid and answer field of the response body will be null.
     * 
     * @param domainId Domain Id of knowledge base, for example &#39;b3158772-ac8f-4ec1-a9d7-bd0d3887fd9b&#39;, which contains its own set of questions/answers (required)
     * @param questionAndContactInfo Question and optional contact information in case Katie does not know the answer and a human expert can send an answer to questioner (required)
     * @param authorization Bearer JWT (optional)
     * @return ResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseAnswer postQuestionUsingPOST(String domainId, AskQuestionBody questionAndContactInfo, Object authorization) throws ApiException {
        ApiResponse<ResponseAnswer> resp = postQuestionUsingPOSTWithHttpInfo(domainId, questionAndContactInfo, authorization);
        return resp.getData();
    }

    /**
     * Ask question and get answer of a previously asked duplicated question. If no answer is available, then the uuid and answer field of the response body will be null.
     * 
     * @param domainId Domain Id of knowledge base, for example &#39;b3158772-ac8f-4ec1-a9d7-bd0d3887fd9b&#39;, which contains its own set of questions/answers (required)
     * @param questionAndContactInfo Question and optional contact information in case Katie does not know the answer and a human expert can send an answer to questioner (required)
     * @param authorization Bearer JWT (optional)
     * @return ApiResponse&lt;ResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseAnswer> postQuestionUsingPOSTWithHttpInfo(String domainId, AskQuestionBody questionAndContactInfo, Object authorization) throws ApiException {
        com.squareup.okhttp.Call call = postQuestionUsingPOSTValidateBeforeCall(domainId, questionAndContactInfo, authorization, null, null);
        Type localVarReturnType = new TypeToken<ResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ask question and get answer of a previously asked duplicated question. If no answer is available, then the uuid and answer field of the response body will be null. (asynchronously)
     * 
     * @param domainId Domain Id of knowledge base, for example &#39;b3158772-ac8f-4ec1-a9d7-bd0d3887fd9b&#39;, which contains its own set of questions/answers (required)
     * @param questionAndContactInfo Question and optional contact information in case Katie does not know the answer and a human expert can send an answer to questioner (required)
     * @param authorization Bearer JWT (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postQuestionUsingPOSTAsync(String domainId, AskQuestionBody questionAndContactInfo, Object authorization, final ApiCallback<ResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postQuestionUsingPOSTValidateBeforeCall(domainId, questionAndContactInfo, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitQuestionToExpertUsingGET
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers, etc. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitQuestionToExpertUsingGETCall(String question, Object authorization, String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/submitQuestionToExpert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domainId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domainId", domainId));
        if (question != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("question", question));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitQuestionToExpertUsingGETValidateBeforeCall(String question, Object authorization, String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling submitQuestionToExpertUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = submitQuestionToExpertUsingGETCall(question, authorization, domainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submit question (when signed in) to expert
     * 
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers, etc. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object submitQuestionToExpertUsingGET(String question, Object authorization, String domainId) throws ApiException {
        ApiResponse<Object> resp = submitQuestionToExpertUsingGETWithHttpInfo(question, authorization, domainId);
        return resp.getData();
    }

    /**
     * Submit question (when signed in) to expert
     * 
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers, etc. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> submitQuestionToExpertUsingGETWithHttpInfo(String question, Object authorization, String domainId) throws ApiException {
        com.squareup.okhttp.Call call = submitQuestionToExpertUsingGETValidateBeforeCall(question, authorization, domainId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit question (when signed in) to expert (asynchronously)
     * 
     * @param question Question, e.g. &#39;What is the highest mountain of the world?&#39; (required)
     * @param authorization Bearer JWT (optional)
     * @param domainId Domain Id, for example &#39;wyona&#39;, which represents a single realm containing its own set of questions/answers, etc. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitQuestionToExpertUsingGETAsync(String question, Object authorization, String domainId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitQuestionToExpertUsingGETValidateBeforeCall(question, authorization, domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
