/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuestionsControllerApi {
    private ApiClient apiClient;

    public QuestionsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuestionsControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for approveAnswerOfAskedQuestionUsingGET
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveAnswerOfAskedQuestionUsingGETCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/asked/{qid}/approve"
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveAnswerOfAskedQuestionUsingGETValidateBeforeCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling approveAnswerOfAskedQuestionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = approveAnswerOfAskedQuestionUsingGETCall(qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Approve answer of asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object approveAnswerOfAskedQuestionUsingGET(String qid) throws ApiException {
        ApiResponse<Object> resp = approveAnswerOfAskedQuestionUsingGETWithHttpInfo(qid);
        return resp.getData();
    }

    /**
     * Approve answer of asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> approveAnswerOfAskedQuestionUsingGETWithHttpInfo(String qid) throws ApiException {
        com.squareup.okhttp.Call call = approveAnswerOfAskedQuestionUsingGETValidateBeforeCall(qid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve answer of asked question (asynchronously)
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveAnswerOfAskedQuestionUsingGETAsync(String qid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveAnswerOfAskedQuestionUsingGETValidateBeforeCall(qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for discardAnswerOfAskedQuestionUsingGET
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call discardAnswerOfAskedQuestionUsingGETCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/asked/{qid}/discard"
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call discardAnswerOfAskedQuestionUsingGETValidateBeforeCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling discardAnswerOfAskedQuestionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = discardAnswerOfAskedQuestionUsingGETCall(qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Discard answer of asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object discardAnswerOfAskedQuestionUsingGET(String qid) throws ApiException {
        ApiResponse<Object> resp = discardAnswerOfAskedQuestionUsingGETWithHttpInfo(qid);
        return resp.getData();
    }

    /**
     * Discard answer of asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> discardAnswerOfAskedQuestionUsingGETWithHttpInfo(String qid) throws ApiException {
        com.squareup.okhttp.Call call = discardAnswerOfAskedQuestionUsingGETValidateBeforeCall(qid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Discard answer of asked question (asynchronously)
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call discardAnswerOfAskedQuestionUsingGETAsync(String qid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = discardAnswerOfAskedQuestionUsingGETValidateBeforeCall(qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAskedQuestionUsingGET
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAskedQuestionUsingGETCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/asked/{qid}"
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAskedQuestionUsingGETValidateBeforeCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling getAskedQuestionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAskedQuestionUsingGETCall(qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a particular asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAskedQuestionUsingGET(String qid) throws ApiException {
        ApiResponse<Object> resp = getAskedQuestionUsingGETWithHttpInfo(qid);
        return resp.getData();
    }

    /**
     * Get a particular asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAskedQuestionUsingGETWithHttpInfo(String qid) throws ApiException {
        com.squareup.okhttp.Call call = getAskedQuestionUsingGETValidateBeforeCall(qid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular asked question (asynchronously)
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAskedQuestionUsingGETAsync(String qid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAskedQuestionUsingGETValidateBeforeCall(qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAskedQuestionsUsingGET
     * @param limit Pagination: Limit the number of returned questions (required)
     * @param offset Pagination: Offset indicates the start of the returned questions (required)
     * @param contextId Domain Id of asked questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAskedQuestionsUsingGETCall(Integer limit, Integer offset, String contextId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/asked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contextId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contextId", contextId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAskedQuestionsUsingGETValidateBeforeCall(Integer limit, Integer offset, String contextId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getAskedQuestionsUsingGET(Async)");
        }
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getAskedQuestionsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAskedQuestionsUsingGETCall(limit, offset, contextId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all asked questions
     * 
     * @param limit Pagination: Limit the number of returned questions (required)
     * @param offset Pagination: Offset indicates the start of the returned questions (required)
     * @param contextId Domain Id of asked questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAskedQuestionsUsingGET(Integer limit, Integer offset, String contextId) throws ApiException {
        ApiResponse<Object> resp = getAskedQuestionsUsingGETWithHttpInfo(limit, offset, contextId);
        return resp.getData();
    }

    /**
     * Get all asked questions
     * 
     * @param limit Pagination: Limit the number of returned questions (required)
     * @param offset Pagination: Offset indicates the start of the returned questions (required)
     * @param contextId Domain Id of asked questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAskedQuestionsUsingGETWithHttpInfo(Integer limit, Integer offset, String contextId) throws ApiException {
        com.squareup.okhttp.Call call = getAskedQuestionsUsingGETValidateBeforeCall(limit, offset, contextId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all asked questions (asynchronously)
     * 
     * @param limit Pagination: Limit the number of returned questions (required)
     * @param offset Pagination: Offset indicates the start of the returned questions (required)
     * @param contextId Domain Id of asked questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAskedQuestionsUsingGETAsync(Integer limit, Integer offset, String contextId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAskedQuestionsUsingGETValidateBeforeCall(limit, offset, contextId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailContainingAskedQuestionUsingGET
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailContainingAskedQuestionUsingGETCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/asked/{qid}/email"
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailContainingAskedQuestionUsingGETValidateBeforeCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling getEmailContainingAskedQuestionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailContainingAskedQuestionUsingGETCall(qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email containing asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getEmailContainingAskedQuestionUsingGET(String qid) throws ApiException {
        ApiResponse<Object> resp = getEmailContainingAskedQuestionUsingGETWithHttpInfo(qid);
        return resp.getData();
    }

    /**
     * Get email containing asked question
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getEmailContainingAskedQuestionUsingGETWithHttpInfo(String qid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailContainingAskedQuestionUsingGETValidateBeforeCall(qid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email containing asked question (asynchronously)
     * 
     * @param qid UUID of question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailContainingAskedQuestionUsingGETAsync(String qid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailContainingAskedQuestionUsingGETValidateBeforeCall(qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResubmittedQuestionsUsingGET
     * @param limit Pagination: Limit the number of returned resubmitted questions (required)
     * @param offset Pagination: Offset indicates the start of the returned resubmitted questions (required)
     * @param contextId Context Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @param status Status of resubmitted questions (e.g. &#39;answer-pending&#39;, &#39;answered-and-ready-to-send&#39;, &#39;answer-sent&#39;, &#39;answer-rated&#39;, &#39;trained-with-answer&#39;) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResubmittedQuestionsUsingGETCall(Integer limit, Integer offset, String contextId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/resubmitted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contextId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contextId", contextId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResubmittedQuestionsUsingGETValidateBeforeCall(Integer limit, Integer offset, String contextId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getResubmittedQuestionsUsingGET(Async)");
        }
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getResubmittedQuestionsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getResubmittedQuestionsUsingGETCall(limit, offset, contextId, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all resubmitted questions
     * 
     * @param limit Pagination: Limit the number of returned resubmitted questions (required)
     * @param offset Pagination: Offset indicates the start of the returned resubmitted questions (required)
     * @param contextId Context Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @param status Status of resubmitted questions (e.g. &#39;answer-pending&#39;, &#39;answered-and-ready-to-send&#39;, &#39;answer-sent&#39;, &#39;answer-rated&#39;, &#39;trained-with-answer&#39;) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getResubmittedQuestionsUsingGET(Integer limit, Integer offset, String contextId, String status) throws ApiException {
        ApiResponse<Object> resp = getResubmittedQuestionsUsingGETWithHttpInfo(limit, offset, contextId, status);
        return resp.getData();
    }

    /**
     * Get all resubmitted questions
     * 
     * @param limit Pagination: Limit the number of returned resubmitted questions (required)
     * @param offset Pagination: Offset indicates the start of the returned resubmitted questions (required)
     * @param contextId Context Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @param status Status of resubmitted questions (e.g. &#39;answer-pending&#39;, &#39;answered-and-ready-to-send&#39;, &#39;answer-sent&#39;, &#39;answer-rated&#39;, &#39;trained-with-answer&#39;) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getResubmittedQuestionsUsingGETWithHttpInfo(Integer limit, Integer offset, String contextId, String status) throws ApiException {
        com.squareup.okhttp.Call call = getResubmittedQuestionsUsingGETValidateBeforeCall(limit, offset, contextId, status, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all resubmitted questions (asynchronously)
     * 
     * @param limit Pagination: Limit the number of returned resubmitted questions (required)
     * @param offset Pagination: Offset indicates the start of the returned resubmitted questions (required)
     * @param contextId Context Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (optional)
     * @param status Status of resubmitted questions (e.g. &#39;answer-pending&#39;, &#39;answered-and-ready-to-send&#39;, &#39;answer-sent&#39;, &#39;answer-rated&#39;, &#39;trained-with-answer&#39;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResubmittedQuestionsUsingGETAsync(Integer limit, Integer offset, String contextId, String status, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResubmittedQuestionsUsingGETValidateBeforeCall(limit, offset, contextId, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainedQuestionsIndexUsingGET
     * @param domainId Domain Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainedQuestionsIndexUsingGETCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/trained/index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domainId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domainId", domainId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainedQuestionsIndexUsingGETValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getTrainedQuestionsIndexUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTrainedQuestionsIndexUsingGETCall(domainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get index of all trained questions/answers
     * 
     * @param domainId Domain Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getTrainedQuestionsIndexUsingGET(String domainId) throws ApiException {
        ApiResponse<Object> resp = getTrainedQuestionsIndexUsingGETWithHttpInfo(domainId);
        return resp.getData();
    }

    /**
     * Get index of all trained questions/answers
     * 
     * @param domainId Domain Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getTrainedQuestionsIndexUsingGETWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = getTrainedQuestionsIndexUsingGETValidateBeforeCall(domainId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get index of all trained questions/answers (asynchronously)
     * 
     * @param domainId Domain Id of resubmitted questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainedQuestionsIndexUsingGETAsync(String domainId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainedQuestionsIndexUsingGETValidateBeforeCall(domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainedQuestionsUsingGET
     * @param domainId Domain Id of knowledge base of trained questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainedQuestionsUsingGETCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/questions/trained";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domainId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domainId", domainId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainedQuestionsUsingGETValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getTrainedQuestionsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTrainedQuestionsUsingGETCall(domainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all trained questions/answers
     * 
     * @param domainId Domain Id of knowledge base of trained questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getTrainedQuestionsUsingGET(String domainId) throws ApiException {
        ApiResponse<Object> resp = getTrainedQuestionsUsingGETWithHttpInfo(domainId);
        return resp.getData();
    }

    /**
     * Get all trained questions/answers
     * 
     * @param domainId Domain Id of knowledge base of trained questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getTrainedQuestionsUsingGETWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = getTrainedQuestionsUsingGETValidateBeforeCall(domainId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all trained questions/answers (asynchronously)
     * 
     * @param domainId Domain Id of knowledge base of trained questions (e.g. &#39;wyona&#39; or &#39;ROOT&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainedQuestionsUsingGETAsync(String domainId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainedQuestionsUsingGETValidateBeforeCall(domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
