/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Answer;
import io.swagger.client.model.Question;
import io.swagger.client.model.ResubmittedQuestion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuestionControllerApi {
    private ApiClient apiClient;

    public QuestionControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuestionControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addQuestionAndAnswerUsingPOST
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param newQnA Only needs to contain originalQuestion and answer (required)
     * @param authorization Bearer JWT (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuestionAndAnswerUsingPOSTCall(String domainid, Answer newQnA, Object authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newQnA;

        // create path and map variables
        String localVarPath = "/api/v1/question/trained/{domainid}"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuestionAndAnswerUsingPOSTValidateBeforeCall(String domainid, Answer newQnA, Object authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling addQuestionAndAnswerUsingPOST(Async)");
        }
        
        // verify the required parameter 'newQnA' is set
        if (newQnA == null) {
            throw new ApiException("Missing the required parameter 'newQnA' when calling addQuestionAndAnswerUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuestionAndAnswerUsingPOSTCall(domainid, newQnA, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add/train a new QnA
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param newQnA Only needs to contain originalQuestion and answer (required)
     * @param authorization Bearer JWT (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object addQuestionAndAnswerUsingPOST(String domainid, Answer newQnA, Object authorization) throws ApiException {
        ApiResponse<Object> resp = addQuestionAndAnswerUsingPOSTWithHttpInfo(domainid, newQnA, authorization);
        return resp.getData();
    }

    /**
     * Add/train a new QnA
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param newQnA Only needs to contain originalQuestion and answer (required)
     * @param authorization Bearer JWT (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> addQuestionAndAnswerUsingPOSTWithHttpInfo(String domainid, Answer newQnA, Object authorization) throws ApiException {
        com.squareup.okhttp.Call call = addQuestionAndAnswerUsingPOSTValidateBeforeCall(domainid, newQnA, authorization, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add/train a new QnA (asynchronously)
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param newQnA Only needs to contain originalQuestion and answer (required)
     * @param authorization Bearer JWT (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuestionAndAnswerUsingPOSTAsync(String domainid, Answer newQnA, Object authorization, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuestionAndAnswerUsingPOSTValidateBeforeCall(domainid, newQnA, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for answerResubmittedQuestionUsingPUT
     * @param answeredQuestion Only needs to contain answer (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call answerResubmittedQuestionUsingPUTCall(ResubmittedQuestion answeredQuestion, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = answeredQuestion;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call answerResubmittedQuestionUsingPUTValidateBeforeCall(ResubmittedQuestion answeredQuestion, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'answeredQuestion' is set
        if (answeredQuestion == null) {
            throw new ApiException("Missing the required parameter 'answeredQuestion' when calling answerResubmittedQuestionUsingPUT(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling answerResubmittedQuestionUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = answerResubmittedQuestionUsingPUTCall(answeredQuestion, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Answer a particular resubmitted question
     * 
     * @param answeredQuestion Only needs to contain answer (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object answerResubmittedQuestionUsingPUT(ResubmittedQuestion answeredQuestion, String uuid) throws ApiException {
        ApiResponse<Object> resp = answerResubmittedQuestionUsingPUTWithHttpInfo(answeredQuestion, uuid);
        return resp.getData();
    }

    /**
     * Answer a particular resubmitted question
     * 
     * @param answeredQuestion Only needs to contain answer (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> answerResubmittedQuestionUsingPUTWithHttpInfo(ResubmittedQuestion answeredQuestion, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = answerResubmittedQuestionUsingPUTValidateBeforeCall(answeredQuestion, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Answer a particular resubmitted question (asynchronously)
     * 
     * @param answeredQuestion Only needs to contain answer (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call answerResubmittedQuestionUsingPUTAsync(ResubmittedQuestion answeredQuestion, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = answerResubmittedQuestionUsingPUTValidateBeforeCall(answeredQuestion, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteResubmittedQuestionUsingDELETE
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResubmittedQuestionUsingDELETECall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResubmittedQuestionUsingDELETEValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteResubmittedQuestionUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteResubmittedQuestionUsingDELETECall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a particular resubmitted question
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteResubmittedQuestionUsingDELETE(String uuid) throws ApiException {
        ApiResponse<Object> resp = deleteResubmittedQuestionUsingDELETEWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Delete a particular resubmitted question
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteResubmittedQuestionUsingDELETEWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteResubmittedQuestionUsingDELETEValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a particular resubmitted question (asynchronously)
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResubmittedQuestionUsingDELETEAsync(String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResubmittedQuestionUsingDELETEValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTrainedQnAUsingDELETE
     * @param domainid Domain Id trained QnA is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained QnA (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTrainedQnAUsingDELETECall(String domainid, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/trained/{domainid}/{uuid}"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTrainedQnAUsingDELETEValidateBeforeCall(String domainid, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling deleteTrainedQnAUsingDELETE(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteTrainedQnAUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTrainedQnAUsingDELETECall(domainid, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a particular trained QnA
     * 
     * @param domainid Domain Id trained QnA is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained QnA (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteTrainedQnAUsingDELETE(String domainid, String uuid) throws ApiException {
        ApiResponse<Object> resp = deleteTrainedQnAUsingDELETEWithHttpInfo(domainid, uuid);
        return resp.getData();
    }

    /**
     * Delete a particular trained QnA
     * 
     * @param domainid Domain Id trained QnA is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained QnA (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteTrainedQnAUsingDELETEWithHttpInfo(String domainid, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteTrainedQnAUsingDELETEValidateBeforeCall(domainid, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a particular trained QnA (asynchronously)
     * 
     * @param domainid Domain Id trained QnA is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained QnA (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTrainedQnAUsingDELETEAsync(String domainid, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTrainedQnAUsingDELETEValidateBeforeCall(domainid, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRepliedAnswerUsingGET
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRepliedAnswerUsingGETCall(String domainid, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{domainid}/{uuid}/answer"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRepliedAnswerUsingGETValidateBeforeCall(String domainid, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling getRepliedAnswerUsingGET(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getRepliedAnswerUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getRepliedAnswerUsingGETCall(domainid, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get answer to resubmitted question
     * 
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getRepliedAnswerUsingGET(String domainid, String uuid) throws ApiException {
        ApiResponse<Object> resp = getRepliedAnswerUsingGETWithHttpInfo(domainid, uuid);
        return resp.getData();
    }

    /**
     * Get answer to resubmitted question
     * 
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getRepliedAnswerUsingGETWithHttpInfo(String domainid, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = getRepliedAnswerUsingGETValidateBeforeCall(domainid, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get answer to resubmitted question (asynchronously)
     * 
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRepliedAnswerUsingGETAsync(String domainid, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRepliedAnswerUsingGETValidateBeforeCall(domainid, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResubmittedQuestionUsingGET
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResubmittedQuestionUsingGETCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResubmittedQuestionUsingGETValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getResubmittedQuestionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getResubmittedQuestionUsingGETCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a particular resubmitted question
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getResubmittedQuestionUsingGET(String uuid) throws ApiException {
        ApiResponse<Object> resp = getResubmittedQuestionUsingGETWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Get a particular resubmitted question
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getResubmittedQuestionUsingGETWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = getResubmittedQuestionUsingGETValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular resubmitted question (asynchronously)
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResubmittedQuestionUsingGETAsync(String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResubmittedQuestionUsingGETValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrainedQuestionAnswerUsingGET
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param authorization Bearer JWT (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrainedQuestionAnswerUsingGETCall(String domainid, String uuid, Object authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/trained/{domainid}/{uuid}"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrainedQuestionAnswerUsingGETValidateBeforeCall(String domainid, String uuid, Object authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling getTrainedQuestionAnswerUsingGET(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getTrainedQuestionAnswerUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTrainedQuestionAnswerUsingGETCall(domainid, uuid, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a particular trained question/answer
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param authorization Bearer JWT (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getTrainedQuestionAnswerUsingGET(String domainid, String uuid, Object authorization) throws ApiException {
        ApiResponse<Object> resp = getTrainedQuestionAnswerUsingGETWithHttpInfo(domainid, uuid, authorization);
        return resp.getData();
    }

    /**
     * Get a particular trained question/answer
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param authorization Bearer JWT (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getTrainedQuestionAnswerUsingGETWithHttpInfo(String domainid, String uuid, Object authorization) throws ApiException {
        com.squareup.okhttp.Call call = getTrainedQuestionAnswerUsingGETValidateBeforeCall(domainid, uuid, authorization, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a particular trained question/answer (asynchronously)
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param authorization Bearer JWT (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrainedQuestionAnswerUsingGETAsync(String domainid, String uuid, Object authorization, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrainedQuestionAnswerUsingGETValidateBeforeCall(domainid, uuid, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rateRepliedAnswerUsingGET
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param rating User rating of replied answer, between 0 and 10, whereas 0 means not helpful and 10 means very helpful (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rateRepliedAnswerUsingGETCall(String domainid, String rating, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{domainid}/{uuid}/rateAnswer"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rating != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rating", rating));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rateRepliedAnswerUsingGETValidateBeforeCall(String domainid, String rating, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling rateRepliedAnswerUsingGET(Async)");
        }
        
        // verify the required parameter 'rating' is set
        if (rating == null) {
            throw new ApiException("Missing the required parameter 'rating' when calling rateRepliedAnswerUsingGET(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling rateRepliedAnswerUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = rateRepliedAnswerUsingGETCall(domainid, rating, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rate replied answer of resubmitted question
     * 
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param rating User rating of replied answer, between 0 and 10, whereas 0 means not helpful and 10 means very helpful (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object rateRepliedAnswerUsingGET(String domainid, String rating, String uuid) throws ApiException {
        ApiResponse<Object> resp = rateRepliedAnswerUsingGETWithHttpInfo(domainid, rating, uuid);
        return resp.getData();
    }

    /**
     * Rate replied answer of resubmitted question
     * 
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param rating User rating of replied answer, between 0 and 10, whereas 0 means not helpful and 10 means very helpful (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> rateRepliedAnswerUsingGETWithHttpInfo(String domainid, String rating, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = rateRepliedAnswerUsingGETValidateBeforeCall(domainid, rating, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rate replied answer of resubmitted question (asynchronously)
     * 
     * @param domainid Domain Id resubmitted question is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param rating User rating of replied answer, between 0 and 10, whereas 0 means not helpful and 10 means very helpful (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rateRepliedAnswerUsingGETAsync(String domainid, String rating, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rateRepliedAnswerUsingGETValidateBeforeCall(domainid, rating, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendAnswerToUserWhichResubmittedQuestionUsingGET
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendAnswerToUserWhichResubmittedQuestionUsingGETCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{uuid}/sendAnswer"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendAnswerToUserWhichResubmittedQuestionUsingGETValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling sendAnswerToUserWhichResubmittedQuestionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = sendAnswerToUserWhichResubmittedQuestionUsingGETCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send answer back to user which resubmitted question
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sendAnswerToUserWhichResubmittedQuestionUsingGET(String uuid) throws ApiException {
        ApiResponse<Object> resp = sendAnswerToUserWhichResubmittedQuestionUsingGETWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Send answer back to user which resubmitted question
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sendAnswerToUserWhichResubmittedQuestionUsingGETWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = sendAnswerToUserWhichResubmittedQuestionUsingGETValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send answer back to user which resubmitted question (asynchronously)
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendAnswerToUserWhichResubmittedQuestionUsingGETAsync(String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendAnswerToUserWhichResubmittedQuestionUsingGETValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGET
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{uuid}/train"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger training of AI service with resubmitted question and associated answer
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGET(String uuid) throws ApiException {
        ApiResponse<Object> resp = trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Trigger training of AI service with resubmitted question and associated answer
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger training of AI service with resubmitted question and associated answer (asynchronously)
     * 
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETAsync(String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trainAIWithResubmittedQuestionAndAssociatedAnswerUsingGETValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateQuestionOfResubmittedQuestionUsingPUT
     * @param question Only needs to contain question (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuestionOfResubmittedQuestionUsingPUTCall(ResubmittedQuestion question, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = question;

        // create path and map variables
        String localVarPath = "/api/v1/question/resubmitted/{uuid}/question"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionOfResubmittedQuestionUsingPUTValidateBeforeCall(ResubmittedQuestion question, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling updateQuestionOfResubmittedQuestionUsingPUT(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateQuestionOfResubmittedQuestionUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuestionOfResubmittedQuestionUsingPUTCall(question, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update question of a particular resubmitted question, for example when question contains typos
     * 
     * @param question Only needs to contain question (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateQuestionOfResubmittedQuestionUsingPUT(ResubmittedQuestion question, String uuid) throws ApiException {
        ApiResponse<Object> resp = updateQuestionOfResubmittedQuestionUsingPUTWithHttpInfo(question, uuid);
        return resp.getData();
    }

    /**
     * Update question of a particular resubmitted question, for example when question contains typos
     * 
     * @param question Only needs to contain question (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateQuestionOfResubmittedQuestionUsingPUTWithHttpInfo(ResubmittedQuestion question, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionOfResubmittedQuestionUsingPUTValidateBeforeCall(question, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update question of a particular resubmitted question, for example when question contains typos (asynchronously)
     * 
     * @param question Only needs to contain question (required)
     * @param uuid UUID of resubmitted question (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionOfResubmittedQuestionUsingPUTAsync(ResubmittedQuestion question, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionOfResubmittedQuestionUsingPUTValidateBeforeCall(question, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrainedAnswerUsingPUT
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param updatedAnswer Only needs to contain answer (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTrainedAnswerUsingPUTCall(String domainid, Answer updatedAnswer, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updatedAnswer;

        // create path and map variables
        String localVarPath = "/api/v1/question/trained/{domainid}/{uuid}"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTrainedAnswerUsingPUTValidateBeforeCall(String domainid, Answer updatedAnswer, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling updateTrainedAnswerUsingPUT(Async)");
        }
        
        // verify the required parameter 'updatedAnswer' is set
        if (updatedAnswer == null) {
            throw new ApiException("Missing the required parameter 'updatedAnswer' when calling updateTrainedAnswerUsingPUT(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateTrainedAnswerUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTrainedAnswerUsingPUTCall(domainid, updatedAnswer, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a particular trained question/answer
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param updatedAnswer Only needs to contain answer (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateTrainedAnswerUsingPUT(String domainid, Answer updatedAnswer, String uuid) throws ApiException {
        ApiResponse<Object> resp = updateTrainedAnswerUsingPUTWithHttpInfo(domainid, updatedAnswer, uuid);
        return resp.getData();
    }

    /**
     * Update a particular trained question/answer
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param updatedAnswer Only needs to contain answer (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateTrainedAnswerUsingPUTWithHttpInfo(String domainid, Answer updatedAnswer, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = updateTrainedAnswerUsingPUTValidateBeforeCall(domainid, updatedAnswer, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a particular trained question/answer (asynchronously)
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param updatedAnswer Only needs to contain answer (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTrainedAnswerUsingPUTAsync(String domainid, Answer updatedAnswer, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTrainedAnswerUsingPUTValidateBeforeCall(domainid, updatedAnswer, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrainedQuestionUsingPATCH
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param question Updated question (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTrainedQuestionUsingPATCHCall(String domainid, Question question, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = question;

        // create path and map variables
        String localVarPath = "/api/v1/question/trained/{domainid}/{uuid}/question"
            .replaceAll("\\{" + "domainid" + "\\}", apiClient.escapeString(domainid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTrainedQuestionUsingPATCHValidateBeforeCall(String domainid, Question question, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling updateTrainedQuestionUsingPATCH(Async)");
        }
        
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling updateTrainedQuestionUsingPATCH(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateTrainedQuestionUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTrainedQuestionUsingPATCHCall(domainid, question, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update question of a particular trained QnA
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param question Updated question (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateTrainedQuestionUsingPATCH(String domainid, Question question, String uuid) throws ApiException {
        ApiResponse<Object> resp = updateTrainedQuestionUsingPATCHWithHttpInfo(domainid, question, uuid);
        return resp.getData();
    }

    /**
     * Update question of a particular trained QnA
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param question Updated question (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateTrainedQuestionUsingPATCHWithHttpInfo(String domainid, Question question, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = updateTrainedQuestionUsingPATCHValidateBeforeCall(domainid, question, uuid, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update question of a particular trained QnA (asynchronously)
     * 
     * @param domainid Domain Id trained question/answer is associated with (e.g. &#39;ROOT&#39; or &#39;df9f42a1-5697-47f0-909d-3f4b88d9baf6&#39;) (required)
     * @param question Updated question (required)
     * @param uuid UUID of trained question/answer (e.g. &#39;194b6cf3-bad2-48e6-a8d2-8c55eb33f027&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTrainedQuestionUsingPATCHAsync(String domainid, Question question, String uuid, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTrainedQuestionUsingPATCHValidateBeforeCall(domainid, question, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
