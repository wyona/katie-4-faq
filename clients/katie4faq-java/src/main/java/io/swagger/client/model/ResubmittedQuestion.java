/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Sentence;
import io.swagger.client.model.User;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * ResubmittedQuestion
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-06T08:37:37.081Z")
public class ResubmittedQuestion {
  @SerializedName("analyzedQuestion")
  private Sentence analyzedQuestion = null;

  @SerializedName("answer")
  private String answer = null;

  @SerializedName("answerClientSideEncryptedAlgorithm")
  private String answerClientSideEncryptedAlgorithm = null;

  @SerializedName("answerLinkType")
  private String answerLinkType = null;

  @SerializedName("channelRequestId")
  private String channelRequestId = null;

  /**
   * Gets or Sets channelType
   */
  @JsonAdapter(ChannelTypeEnum.Adapter.class)
  public enum ChannelTypeEnum {
    EMAIL("EMAIL"),
    
    FCM_TOKEN("FCM_TOKEN"),
    
    MATRIX("MATRIX"),
    
    MS_TEAMS("MS_TEAMS"),
    
    SLACK("SLACK"),
    
    UNDEFINED("UNDEFINED"),
    
    WEBHOOK("WEBHOOK");

    private String value;

    ChannelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelTypeEnum fromValue(String text) {
      for (ChannelTypeEnum b : ChannelTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChannelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("channelType")
  private ChannelTypeEnum channelType = null;

  @SerializedName("contextId")
  private String contextId = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("fcmtoken")
  private String fcmtoken = null;

  @SerializedName("ownership")
  private String ownership = null;

  @SerializedName("question")
  private String question = null;

  @SerializedName("questionerUserId")
  private String questionerUserId = null;

  @SerializedName("remoteAddress")
  private String remoteAddress = null;

  @SerializedName("respondent")
  private User respondent = null;

  @SerializedName("respondentUserId")
  private String respondentUserId = null;

  @SerializedName("slackChannelId")
  private String slackChannelId = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("timestampResubmitted")
  private OffsetDateTime timestampResubmitted = null;

  @SerializedName("trained")
  private Boolean trained = null;

  @SerializedName("uuid")
  private String uuid = null;

  public ResubmittedQuestion analyzedQuestion(Sentence analyzedQuestion) {
    this.analyzedQuestion = analyzedQuestion;
    return this;
  }

   /**
   * Get analyzedQuestion
   * @return analyzedQuestion
  **/
  @ApiModelProperty(value = "")
  public Sentence getAnalyzedQuestion() {
    return analyzedQuestion;
  }

  public void setAnalyzedQuestion(Sentence analyzedQuestion) {
    this.analyzedQuestion = analyzedQuestion;
  }

  public ResubmittedQuestion answer(String answer) {
    this.answer = answer;
    return this;
  }

   /**
   * Get answer
   * @return answer
  **/
  @ApiModelProperty(value = "")
  public String getAnswer() {
    return answer;
  }

  public void setAnswer(String answer) {
    this.answer = answer;
  }

  public ResubmittedQuestion answerClientSideEncryptedAlgorithm(String answerClientSideEncryptedAlgorithm) {
    this.answerClientSideEncryptedAlgorithm = answerClientSideEncryptedAlgorithm;
    return this;
  }

   /**
   * Get answerClientSideEncryptedAlgorithm
   * @return answerClientSideEncryptedAlgorithm
  **/
  @ApiModelProperty(value = "")
  public String getAnswerClientSideEncryptedAlgorithm() {
    return answerClientSideEncryptedAlgorithm;
  }

  public void setAnswerClientSideEncryptedAlgorithm(String answerClientSideEncryptedAlgorithm) {
    this.answerClientSideEncryptedAlgorithm = answerClientSideEncryptedAlgorithm;
  }

  public ResubmittedQuestion answerLinkType(String answerLinkType) {
    this.answerLinkType = answerLinkType;
    return this;
  }

   /**
   * Get answerLinkType
   * @return answerLinkType
  **/
  @ApiModelProperty(value = "")
  public String getAnswerLinkType() {
    return answerLinkType;
  }

  public void setAnswerLinkType(String answerLinkType) {
    this.answerLinkType = answerLinkType;
  }

  public ResubmittedQuestion channelRequestId(String channelRequestId) {
    this.channelRequestId = channelRequestId;
    return this;
  }

   /**
   * Get channelRequestId
   * @return channelRequestId
  **/
  @ApiModelProperty(value = "")
  public String getChannelRequestId() {
    return channelRequestId;
  }

  public void setChannelRequestId(String channelRequestId) {
    this.channelRequestId = channelRequestId;
  }

  public ResubmittedQuestion channelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
    return this;
  }

   /**
   * Get channelType
   * @return channelType
  **/
  @ApiModelProperty(value = "")
  public ChannelTypeEnum getChannelType() {
    return channelType;
  }

  public void setChannelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
  }

  public ResubmittedQuestion contextId(String contextId) {
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @ApiModelProperty(value = "")
  public String getContextId() {
    return contextId;
  }

  public void setContextId(String contextId) {
    this.contextId = contextId;
  }

  public ResubmittedQuestion email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @ApiModelProperty(value = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public ResubmittedQuestion fcmtoken(String fcmtoken) {
    this.fcmtoken = fcmtoken;
    return this;
  }

   /**
   * Get fcmtoken
   * @return fcmtoken
  **/
  @ApiModelProperty(value = "")
  public String getFcmtoken() {
    return fcmtoken;
  }

  public void setFcmtoken(String fcmtoken) {
    this.fcmtoken = fcmtoken;
  }

  public ResubmittedQuestion ownership(String ownership) {
    this.ownership = ownership;
    return this;
  }

   /**
   * Get ownership
   * @return ownership
  **/
  @ApiModelProperty(value = "")
  public String getOwnership() {
    return ownership;
  }

  public void setOwnership(String ownership) {
    this.ownership = ownership;
  }

  public ResubmittedQuestion question(String question) {
    this.question = question;
    return this;
  }

   /**
   * Get question
   * @return question
  **/
  @ApiModelProperty(value = "")
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }

  public ResubmittedQuestion questionerUserId(String questionerUserId) {
    this.questionerUserId = questionerUserId;
    return this;
  }

   /**
   * Get questionerUserId
   * @return questionerUserId
  **/
  @ApiModelProperty(value = "")
  public String getQuestionerUserId() {
    return questionerUserId;
  }

  public void setQuestionerUserId(String questionerUserId) {
    this.questionerUserId = questionerUserId;
  }

  public ResubmittedQuestion remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

   /**
   * Get remoteAddress
   * @return remoteAddress
  **/
  @ApiModelProperty(value = "")
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }

  public ResubmittedQuestion respondent(User respondent) {
    this.respondent = respondent;
    return this;
  }

   /**
   * Get respondent
   * @return respondent
  **/
  @ApiModelProperty(value = "")
  public User getRespondent() {
    return respondent;
  }

  public void setRespondent(User respondent) {
    this.respondent = respondent;
  }

  public ResubmittedQuestion respondentUserId(String respondentUserId) {
    this.respondentUserId = respondentUserId;
    return this;
  }

   /**
   * Get respondentUserId
   * @return respondentUserId
  **/
  @ApiModelProperty(value = "")
  public String getRespondentUserId() {
    return respondentUserId;
  }

  public void setRespondentUserId(String respondentUserId) {
    this.respondentUserId = respondentUserId;
  }

  public ResubmittedQuestion slackChannelId(String slackChannelId) {
    this.slackChannelId = slackChannelId;
    return this;
  }

   /**
   * Get slackChannelId
   * @return slackChannelId
  **/
  @ApiModelProperty(value = "")
  public String getSlackChannelId() {
    return slackChannelId;
  }

  public void setSlackChannelId(String slackChannelId) {
    this.slackChannelId = slackChannelId;
  }

  public ResubmittedQuestion status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ResubmittedQuestion timestampResubmitted(OffsetDateTime timestampResubmitted) {
    this.timestampResubmitted = timestampResubmitted;
    return this;
  }

   /**
   * Get timestampResubmitted
   * @return timestampResubmitted
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimestampResubmitted() {
    return timestampResubmitted;
  }

  public void setTimestampResubmitted(OffsetDateTime timestampResubmitted) {
    this.timestampResubmitted = timestampResubmitted;
  }

  public ResubmittedQuestion trained(Boolean trained) {
    this.trained = trained;
    return this;
  }

   /**
   * Get trained
   * @return trained
  **/
  @ApiModelProperty(value = "")
  public Boolean isTrained() {
    return trained;
  }

  public void setTrained(Boolean trained) {
    this.trained = trained;
  }

  public ResubmittedQuestion uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @ApiModelProperty(value = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResubmittedQuestion resubmittedQuestion = (ResubmittedQuestion) o;
    return Objects.equals(this.analyzedQuestion, resubmittedQuestion.analyzedQuestion) &&
        Objects.equals(this.answer, resubmittedQuestion.answer) &&
        Objects.equals(this.answerClientSideEncryptedAlgorithm, resubmittedQuestion.answerClientSideEncryptedAlgorithm) &&
        Objects.equals(this.answerLinkType, resubmittedQuestion.answerLinkType) &&
        Objects.equals(this.channelRequestId, resubmittedQuestion.channelRequestId) &&
        Objects.equals(this.channelType, resubmittedQuestion.channelType) &&
        Objects.equals(this.contextId, resubmittedQuestion.contextId) &&
        Objects.equals(this.email, resubmittedQuestion.email) &&
        Objects.equals(this.fcmtoken, resubmittedQuestion.fcmtoken) &&
        Objects.equals(this.ownership, resubmittedQuestion.ownership) &&
        Objects.equals(this.question, resubmittedQuestion.question) &&
        Objects.equals(this.questionerUserId, resubmittedQuestion.questionerUserId) &&
        Objects.equals(this.remoteAddress, resubmittedQuestion.remoteAddress) &&
        Objects.equals(this.respondent, resubmittedQuestion.respondent) &&
        Objects.equals(this.respondentUserId, resubmittedQuestion.respondentUserId) &&
        Objects.equals(this.slackChannelId, resubmittedQuestion.slackChannelId) &&
        Objects.equals(this.status, resubmittedQuestion.status) &&
        Objects.equals(this.timestampResubmitted, resubmittedQuestion.timestampResubmitted) &&
        Objects.equals(this.trained, resubmittedQuestion.trained) &&
        Objects.equals(this.uuid, resubmittedQuestion.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzedQuestion, answer, answerClientSideEncryptedAlgorithm, answerLinkType, channelRequestId, channelType, contextId, email, fcmtoken, ownership, question, questionerUserId, remoteAddress, respondent, respondentUserId, slackChannelId, status, timestampResubmitted, trained, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResubmittedQuestion {\n");
    
    sb.append("    analyzedQuestion: ").append(toIndentedString(analyzedQuestion)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    answerClientSideEncryptedAlgorithm: ").append(toIndentedString(answerClientSideEncryptedAlgorithm)).append("\n");
    sb.append("    answerLinkType: ").append(toIndentedString(answerLinkType)).append("\n");
    sb.append("    channelRequestId: ").append(toIndentedString(channelRequestId)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fcmtoken: ").append(toIndentedString(fcmtoken)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    questionerUserId: ").append(toIndentedString(questionerUserId)).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    respondent: ").append(toIndentedString(respondent)).append("\n");
    sb.append("    respondentUserId: ").append(toIndentedString(respondentUserId)).append("\n");
    sb.append("    slackChannelId: ").append(toIndentedString(slackChannelId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestampResubmitted: ").append(toIndentedString(timestampResubmitted)).append("\n");
    sb.append("    trained: ").append(toIndentedString(trained)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

