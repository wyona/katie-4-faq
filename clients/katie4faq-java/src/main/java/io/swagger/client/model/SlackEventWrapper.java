/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SlackEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SlackEventWrapper
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-06T08:37:37.081Z")
public class SlackEventWrapper {
  @SerializedName("api_app_id")
  private String apiAppId = null;

  @SerializedName("authed_users")
  private List<String> authedUsers = null;

  @SerializedName("challenge")
  private String challenge = null;

  @SerializedName("event")
  private SlackEvent event = null;

  @SerializedName("event_id")
  private String eventId = null;

  @SerializedName("team_id")
  private String teamId = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("type")
  private String type = null;

  public SlackEventWrapper apiAppId(String apiAppId) {
    this.apiAppId = apiAppId;
    return this;
  }

   /**
   * Get apiAppId
   * @return apiAppId
  **/
  @ApiModelProperty(value = "")
  public String getApiAppId() {
    return apiAppId;
  }

  public void setApiAppId(String apiAppId) {
    this.apiAppId = apiAppId;
  }

  public SlackEventWrapper authedUsers(List<String> authedUsers) {
    this.authedUsers = authedUsers;
    return this;
  }

  public SlackEventWrapper addAuthedUsersItem(String authedUsersItem) {
    if (this.authedUsers == null) {
      this.authedUsers = new ArrayList<String>();
    }
    this.authedUsers.add(authedUsersItem);
    return this;
  }

   /**
   * Get authedUsers
   * @return authedUsers
  **/
  @ApiModelProperty(value = "")
  public List<String> getAuthedUsers() {
    return authedUsers;
  }

  public void setAuthedUsers(List<String> authedUsers) {
    this.authedUsers = authedUsers;
  }

  public SlackEventWrapper challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

   /**
   * Get challenge
   * @return challenge
  **/
  @ApiModelProperty(value = "")
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }

  public SlackEventWrapper event(SlackEvent event) {
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @ApiModelProperty(value = "")
  public SlackEvent getEvent() {
    return event;
  }

  public void setEvent(SlackEvent event) {
    this.event = event;
  }

  public SlackEventWrapper eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @ApiModelProperty(value = "")
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  public SlackEventWrapper teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @ApiModelProperty(value = "")
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }

  public SlackEventWrapper token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public SlackEventWrapper type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlackEventWrapper slackEventWrapper = (SlackEventWrapper) o;
    return Objects.equals(this.apiAppId, slackEventWrapper.apiAppId) &&
        Objects.equals(this.authedUsers, slackEventWrapper.authedUsers) &&
        Objects.equals(this.challenge, slackEventWrapper.challenge) &&
        Objects.equals(this.event, slackEventWrapper.event) &&
        Objects.equals(this.eventId, slackEventWrapper.eventId) &&
        Objects.equals(this.teamId, slackEventWrapper.teamId) &&
        Objects.equals(this.token, slackEventWrapper.token) &&
        Objects.equals(this.type, slackEventWrapper.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiAppId, authedUsers, challenge, event, eventId, teamId, token, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlackEventWrapper {\n");
    
    sb.append("    apiAppId: ").append(toIndentedString(apiAppId)).append("\n");
    sb.append("    authedUsers: ").append(toIndentedString(authedUsers)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

