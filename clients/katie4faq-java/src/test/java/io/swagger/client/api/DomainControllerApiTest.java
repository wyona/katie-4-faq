/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.IMAPConfiguration;
import io.swagger.client.model.MatchReplyToEmails;
import io.swagger.client.model.Webhook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainControllerApi
 */
@Ignore
public class DomainControllerApiTest {

    private final DomainControllerApi api = new DomainControllerApi();

    
    /**
     * Add webhook to a particular domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWebhookUsingPOSTTest() throws ApiException {
        String id = null;
        Webhook webhook = null;
        Object response = api.addWebhookUsingPOST(id, webhook);

        // TODO: test validations
    }
    
    /**
     * Delete a particular webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookUsingDELETETest() throws ApiException {
        String id = null;
        String webhookId = null;
        Object response = api.deleteWebhookUsingDELETE(id, webhookId);

        // TODO: test validations
    }
    
    /**
     * Get insights of a particular domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInsightsUsingGETTest() throws ApiException {
        String id = null;
        Integer lastNumberOfDays = null;
        Object response = api.getInsightsUsingGET(id, lastNumberOfDays);

        // TODO: test validations
    }
    
    /**
     * Get all members of a particular domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMembersUsingGETTest() throws ApiException {
        String id = null;
        Object response = api.getMembersUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * Get deliveries of a particular webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookDeliveriesUsingGETTest() throws ApiException {
        String id = null;
        String webhookId = null;
        Object response = api.getWebhookDeliveriesUsingGET(id, webhookId);

        // TODO: test validations
    }
    
    /**
     * Get webhooks of a particular domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksUsingGETTest() throws ApiException {
        String id = null;
        Object response = api.getWebhooksUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * Invite user to a particular domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteUserUsingPOSTTest() throws ApiException {
        String email = null;
        String id = null;
        Object response = api.inviteUserUsingPOST(email, id);

        // TODO: test validations
    }
    
    /**
     * Reindex all QnAs of a particular domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reindexUsingGETTest() throws ApiException {
        String id = null;
        String impl = null;
        Object response = api.reindexUsingGET(id, impl);

        // TODO: test validations
    }
    
    /**
     * Toggle whether a particular user is an expert
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleExpertUsingPUTTest() throws ApiException {
        String id = null;
        String username = null;
        Object response = api.toggleExpertUsingPUT(id, username);

        // TODO: test validations
    }
    
    /**
     * Toggle whether answers must be approved / moderated
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleModerationUsingPUTTest() throws ApiException {
        String id = null;
        Object response = api.toggleModerationUsingPUT(id);

        // TODO: test validations
    }
    
    /**
     * Toggle whether a particular user is a moderator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleModeratorUsingPUTTest() throws ApiException {
        String id = null;
        String username = null;
        Object response = api.toggleModeratorUsingPUT(id, username);

        // TODO: test validations
    }
    
    /**
     * Update IMAP configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIMAPConfigurationUsingPUTTest() throws ApiException {
        String id = null;
        IMAPConfiguration imapConfig = null;
        Object response = api.updateIMAPConfigurationUsingPUT(id, imapConfig);

        // TODO: test validations
    }
    
    /**
     * Update match reply-to email address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMatchReplyToEmailAddressUsingPUTTest() throws ApiException {
        MatchReplyToEmails emails = null;
        String id = null;
        Object response = api.updateMatchReplyToEmailAddressUsingPUT(emails, id);

        // TODO: test validations
    }
    
}
