/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Credentials;
import io.swagger.client.model.JWTPayload;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationControllerApi
 */
@Ignore
public class AuthenticationControllerApiTest {

    private final AuthenticationControllerApi api = new AuthenticationControllerApi();

    
    /**
     * Login with username/password or JWT token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doLoginUsingPOSTTest() throws ApiException {
        Object authorization = null;
        Credentials credentials = null;
        Boolean rememberMe = null;
        Object response = api.doLoginUsingPOST(authorization, credentials, rememberMe);

        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doLogoutUsingGETTest() throws ApiException {
        Object response = api.doLogoutUsingGET();

        // TODO: test validations
    }
    
    /**
     * Create generic JWT token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateGenericJWTUsingPOSTTest() throws ApiException {
        JWTPayload payload = null;
        Long seconds = null;
        Object response = api.generateGenericJWTUsingPOST(payload, seconds);

        // TODO: test validations
    }
    
    /**
     * Create Katie specific JWT token for a particular user which exists inside the IAM of Katie
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateJWTUsingPOSTTest() throws ApiException {
        Boolean addProfile = null;
        Long seconds = null;
        String username = null;
        Object response = api.generateJWTUsingPOST(addProfile, seconds, username);

        // TODO: test validations
    }
    
    /**
     * Get public key (in PEM format) to validate JWT token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJWTPublicKeyUsingGETTest() throws ApiException {
        Object response = api.getJWTPublicKeyUsingGET();

        // TODO: test validations
    }
    
    /**
     * Get user information of signed in user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserUsingGETTest() throws ApiException {
        Object response = api.getUserUsingGET();

        // TODO: test validations
    }
    
    /**
     * Get username of signed in user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsernameUsingGETTest() throws ApiException {
        Object response = api.getUsernameUsingGET();

        // TODO: test validations
    }
    
}
