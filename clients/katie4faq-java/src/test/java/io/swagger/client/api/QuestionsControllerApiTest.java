/*
 * API
 * Documentation API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuestionsControllerApi
 */
@Ignore
public class QuestionsControllerApiTest {

    private final QuestionsControllerApi api = new QuestionsControllerApi();

    
    /**
     * Approve answer of asked question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void approveAnswerOfAskedQuestionUsingGETTest() throws ApiException {
        String qid = null;
        Object response = api.approveAnswerOfAskedQuestionUsingGET(qid);

        // TODO: test validations
    }
    
    /**
     * Discard answer of asked question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void discardAnswerOfAskedQuestionUsingGETTest() throws ApiException {
        String qid = null;
        Object response = api.discardAnswerOfAskedQuestionUsingGET(qid);

        // TODO: test validations
    }
    
    /**
     * Get a particular asked question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAskedQuestionUsingGETTest() throws ApiException {
        String qid = null;
        Object response = api.getAskedQuestionUsingGET(qid);

        // TODO: test validations
    }
    
    /**
     * Get all asked questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAskedQuestionsUsingGETTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String contextId = null;
        Object response = api.getAskedQuestionsUsingGET(limit, offset, contextId);

        // TODO: test validations
    }
    
    /**
     * Get email containing asked question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailContainingAskedQuestionUsingGETTest() throws ApiException {
        String qid = null;
        Object response = api.getEmailContainingAskedQuestionUsingGET(qid);

        // TODO: test validations
    }
    
    /**
     * Get all resubmitted questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResubmittedQuestionsUsingGETTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String contextId = null;
        String status = null;
        Object response = api.getResubmittedQuestionsUsingGET(limit, offset, contextId, status);

        // TODO: test validations
    }
    
    /**
     * Get index of all trained questions/answers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainedQuestionsIndexUsingGETTest() throws ApiException {
        String domainId = null;
        Object response = api.getTrainedQuestionsIndexUsingGET(domainId);

        // TODO: test validations
    }
    
    /**
     * Get all trained questions/answers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainedQuestionsUsingGETTest() throws ApiException {
        String domainId = null;
        Object response = api.getTrainedQuestionsUsingGET(domainId);

        // TODO: test validations
    }
    
}
